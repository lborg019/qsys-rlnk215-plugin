--[[
  ___________   ___________   ___________
 |   ______  | |   ______  | |   _____   |
 |  |______| | |  |   ___| | |  |     |  |
 |   ________| |  |   \  __| |  |_____|  |
 |__|          |__|    \___\ |___________|

               SOUND & VIDEO
         It's all about performance.

  Written with ðŸ’– by:
  Lukas Borges
  Pro Sound & Video
  lborges@prosound.net
]]--

PluginInfo = 
{
    Name = "Middle Atlantic RLNK-215",
    Version = "1.0",
    Id = "a7f8c50f-7235-4307-bcc9-2a3a91a7df32",
    Description = "Middle Atlantic RLNK-215 Plugin for QSYS",
    ShowDebug = false
}

function GetPrettyName(props)
    return "Middle Atlantic RLNK-215 Plugin"
end

function GetColor(props)
    return {240,0,240}
end

function GetProperties()
    props = {
        --[[
        {
            Name = "Input Count",
            Type = "integer",
            Min = 0,
            Max = 0,
            Value = 0,
        }
        ]]--
    }
    return props
end

function GetControls(props)
    return
    {
        {
            Name        = "address",
            ControlType = "Text",
            PinStyle    = "Input",
            UserPin     = true
        },
        {
            Name        = "port",
            ControlType = "Text",
            PinStyle    = "Input",
            UserPin     = true
        },
        {
            Name        = "username",
            ControlType = "Text",
            PinStyle    = "Input",
            UserPin     = true
        },
        {
            Name        = "password",
            ControlType = "Text",
            PinStyle    = "Input",
            UserPin     = true
        },
        {
            Name        = "access",
            ControlType = "Text",
            PinStyle    = "Output",
            UserPin     = true
        },
        {
            Name        = "connect",
            ControlType = "Button",
            ButtonType  = "Toggle",
            Count       = 1,
            PinStyle    = "Input",
            UserPin     = true
        },
        {
            Name          = "Outlet1",
            ControlType   = "Button",
            Count         = 1,
            PinStyle      = "Input",
            UserPin       = true,
            IconType      = "SVG",
            Icon          = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48c3ZnIHZlcnNpb249IjEuMSIgaWQ9IkxheWVyXzEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IiB2aWV3Qm94PSIwIDAgNjMgNjMiIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDYzIDYzOyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+PHN0eWxlIHR5cGU9InRleHQvY3NzIj4uc3Qwe2ZpbGw6I0JBQkRDNjt9PC9zdHlsZT48cGF0aCBjbGFzcz0ic3QwIiBkPSJNNTkuOTE3LDYzSDMuMDgzQzEuMzg3LDYzLDAsNjEuNjEyLDAsNTkuOTE3VjMuMDgzQzAsMS4zODgsMS4zODcsMCwzLjA4MywwaDU2LjgzM0M2MS42MTIsMCw2MywxLjM4OCw2MywzLjA4M3Y1Ni44MzNDNjMsNjEuNjEyLDYxLjYxMiw2Myw1OS45MTcsNjN6Ii8+PHJlY3QgeD0iMzMiIHk9IjE0IiB3aWR0aD0iMjEiIGhlaWdodD0iNiIvPjxyZWN0IHg9IjM1IiB5PSI0NCIgd2lkdGg9IjE3IiBoZWlnaHQ9IjYiLz48cGF0aCBkPSJNOSwyNnYxMmMwLDAsNSwwLDgsMHM1LTIsNS02cy0yLTYtNS02QzE2LDI2LDksMjYsOSwyNnoiLz48L3N2Zz4="

        },
        {
            Name          = "Outlet2",
            ControlType   = "Button",
            Count         = 1,
            PinStyle      = "Input",
            UserPin       = true,
            IconType      = "SVG",
            Icon          = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48c3ZnIHZlcnNpb249IjEuMSIgaWQ9IkxheWVyXzEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IiB2aWV3Qm94PSIwIDAgNjMgNjMiIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDYzIDYzOyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+PHN0eWxlIHR5cGU9InRleHQvY3NzIj4uc3Qwe2ZpbGw6I0JBQkRDNjt9PC9zdHlsZT48cGF0aCBjbGFzcz0ic3QwIiBkPSJNNTkuOTE3LDYzSDMuMDgzQzEuMzg3LDYzLDAsNjEuNjEyLDAsNTkuOTE3VjMuMDgzQzAsMS4zODgsMS4zODcsMCwzLjA4MywwaDU2LjgzM0M2MS42MTIsMCw2MywxLjM4OCw2MywzLjA4M3Y1Ni44MzNDNjMsNjEuNjEyLDYxLjYxMiw2Myw1OS45MTcsNjN6Ii8+PHJlY3QgeD0iNiIgeT0iMTYiIHRyYW5zZm9ybT0ibWF0cml4KDYuMTIzMjM0ZS0xNyAtMSAxIDYuMTIzMjM0ZS0xNyAtMi41IDM1LjUpIiB3aWR0aD0iMjEiIGhlaWdodD0iNiIvPjxyZWN0IHg9IjM4IiB5PSIxNiIgdHJhbnNmb3JtPSJtYXRyaXgoNi4xMjMyMzRlLTE3IC0xIDEgNi4xMjMyMzRlLTE3IDI3LjUgNjUuNSkiIHdpZHRoPSIxNyIgaGVpZ2h0PSI2Ii8+PHBhdGggZD0iTTI1LjUsNTMuNWgxMmMwLDAsMC01LDAtOHMtMi01LTYtNXMtNiwyLTYsNUMyNS41LDQ2LjUsMjUuNSw1My41LDI1LjUsNTMuNXoiLz48L3N2Zz4="
        },
        {
            Name          = "led_1",
            ControlType   = "Indicator",
            IndicatorType = "Led"
        },
        {
            Name          = "led_2",
            ControlType   = "Indicator",
            IndicatorType = "Led"
        }
    }
    end

function GetControlLayout(props)
    layout = {}

    layout.address = 
    {
        IsBold       = true,
        TextFontSize = 20,
        Color        = { 255, 255, 255 },
        Position     = { 198,  252 },
        Size         = { 256, 32 }
    }
    layout.port = 
    {
        IsBold       = true,
        TextFontSize = 20,
        Color        = { 255, 255, 255 },
        Position     = { 198,  284 },
        Size         = { 256, 32 }
    }
    layout.username = 
    {
        -- default username: username
        IsBold       = true,
        TextFontSize = 20,
        Color        = { 255, 255, 255 },
        Position     = { 198,  316 },
        Size         = { 256, 32 }
    }
    layout.password = 
    {
        -- default password: password
        IsBold       = true,
        TextFontSize = 20,
        Color        = { 255, 255, 255 },
        Position     = { 198,  348 },
        Size         = { 256, 32 }
    }
    layout.access = 
    {
        IsBold       = true,
        TextFontSize = 20,
        Color        = { 105, 105, 105 },
        Position     = { 198, 380 },
        Size         = { 256, 32 },
        IsReadOnly   = true
    }
    layout.connect = 
    {
        Legend       = "Connect",
        Isbold       = true,
        TextFontSize = 20,
        Color        = { 0, 0, 255 },
        Margin       = 0,
        Radius       = 10,
        Position     = { 466, 252 },
        Size         = { 142, 32 }
    }
    layout.Outlet1 = 
    {
        Legend         = "",
        PrettyName     = "outlet~1",
        IsBold         = true,
        TextFontSize   = 20,
        UnlinkOffColor = true,
        Color          = { 0, 255, 0 },
        OffColor       = { 186, 189, 198 }, -- gray | dark blue { 0, 128, 255 } 
        Margin         = 0,
        Radius         = 5, -- 10
        -- Position     = { 460, 252 },
        Position       = { 182, 60 },
        Size           = { 126, 126 }, -- { 120, 120 }
        -- StrokeColor    = { 186, 189, 198 },
        StrokeWidth    = 0
    }
    layout.Outlet2 = 
    {
        Legend         = "",
        PrettyName     = "outlet~2",
        IsBold         = true,
        TextFontSize   = 20,
        UnlinkOffColor = true,
        Color          = { 0, 255, 0 },
        OffColor       = { 186, 189, 198 }, -- { 0, 124, 0 },
        Margin         = 0,
        Radius         = 5,
        Position       = { 338, 60 },
        Size           = { 126, 126 },
        -- StrokeColor    = { 186, 189, 198 },
        StrokeWidth    = 0
    }

    layout.led_1 = 
    {
        Color    = { 0, 255, 0 },  -- green
        OffColor = { 0, 124, 0 },  -- dark green
        Position = { 141, 116 },
        Size     = { 20, 20 }
    }
    layout.led_2 = 
    {
        Color    = { 0, 255, 0 }, -- green
        OffColor = { 0, 124, 0 },  -- dark green
        Position = { 483, 116 },
        Size     = { 20, 20 }
    }

    graphics = 
    {
        {
            Type = "Svg", -- JPEG
            Image = "",
            Position = { 48,18 }, -- { 3 ,18 }
            Size = { 550,184 }
        },
        -- Labels
        {
            Type          = "Label",
            Text          = "IP",
            TextSize      = 20,
            IsBold        = true,
            Color         = { 105, 105, 105 },
            StrokeColor   = { 105, 105, 105 },
            StrokeWidth   = 1,
            Size          = { 156, 32 },
            Position      = { 38,  252 }
        },
        {
            Type          = "Label",
            Text          = "Port",
            TextSize      = 20,
            IsBold        = true,
            Color         = { 105, 105, 105 },
            StrokeColor   = { 105, 105, 105 },
            StrokeWidth   = 1,
            Size          = { 156, 32 },
            Position      = { 38,  284 }
        },
        {
            Type          = "Label",
            Text          = "Username",
            TextSize      = 20,
            IsBold        = true,
            Color         = { 105, 105, 105 },
            StrokeColor   = { 105, 105, 105 },
            StrokeWidth   = 1,
            Size          = { 156, 32 },
            Position      = { 38,  316 }
        },
        {
            Type          = "Label",
            Text          = "Password",
            TextSize      = 20,
            IsBold        = true,
            Color         = { 105, 105, 105 },
            StrokeColor   = { 105, 105, 105 },
            StrokeWidth   = 1,
            Size          = { 156, 32 },
            Position      = { 38,  348 },
        },
        {
            Type          = "Label",
            Text          = "Access",
            TextSize      = 20,
            IsBold        = true,
            Color         = { 105, 105, 105 },
            StrokeColor   = { 105, 105, 105 },
            StrokeWidth   = 1,
            Size          = { 156, 32 },
            Position      = { 38, 380 }
        }
    }

    return layout, graphics
end

if Controls then
    -- runtime lua code goes here:
    --[[

    sequence of instructions upon connection:
    check for successful connection reply
    request state of outlets
    check which outlets are on or off
    toggle buttons and LEDs accordingly (real feedback)
    whenever user toggles/untoggles buttons, check for replies to provide feedback as well

    parse error messages as well for better usability

    cmd table: (only most useful)
    Command           Byte Value     Valid Sub Command
    Nack              0x10           Response
    Ping,Pong         0x01           Set, Response
    Login             0x02           Set, Response
    Power Outlet      0x20           Set, Get, Response, Status Change

    subcmd table:
    Sub-Command       Byte Value
    Set               0x01
    Get               0x02
    Response          0x10
    Status Change     0x12
    Log Alert         0x30

    <header> <len>  <addr> <cmd>  <subcmd>  "u"   "s"   "e"   "r"   "|"   "P"  "a"   "s"   "s"   "w"   "o"   "r"   "d"   <checksum>  <tail>
      0xFE,   0x10,  0x00,  0x02,  0x01,     0x75, 0x73, 0x65, 0x72, 0x7C, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x3F,       0xFF
    ]]--

    -- sending messages
    local one_on           = { 0xFE, 0x09, 0x00, 0x20, 0x01, 0x01, 0x01, 0x30, 0x30, 0x30, 0x30, 0x6A, 0xFF } -- outlet 1 on
    local one_off          = { 0xFE, 0x09, 0x00, 0x20, 0x01, 0x01, 0x00, 0x30, 0x30, 0x30, 0x30, 0x69, 0xFF } -- outlet 1 off
    local two_on           = { 0xFE, 0x09, 0x00, 0x20, 0x01, 0x02, 0x01, 0x30, 0x30, 0x30, 0x30, 0x6B, 0xFF } -- outlet 2 on
    local two_off          = { 0xFE, 0x09, 0x00, 0x20, 0x01, 0x02, 0x00, 0x30, 0x30, 0x30, 0x30, 0x6A, 0xFF } -- outlet 2 off
    local pong             = { 0xFE, 0x03, 0x00, 0x01, 0x10, 0x12, 0xFF }                                     -- qsys sends a pong
    local get_one          = { 0xFE, 0x04, 0x00, 0x20, 0x02, 0x01, 0x25, 0xFF }                               -- get status of outlet 1
    local get_two          = { 0xFE, 0x04, 0x00, 0x20, 0x02, 0x02, 0x26, 0xFF }                               -- get status of outlet 2
  
    -- receiving messages  
    local login_accepted   = { 0xFE, 0x04, 0x00, 0x02, 0x10, 0x01, 0x15, 0xFF }                               -- login accepted
    local login_rejected     = { 0xFE, 0x04, 0x00, 0x02, 0x10, 0x00, 0x14, 0xFF }                               -- login denied
    local ping             = { 0xFE, 0x03, 0x00, 0x01, 0x01, 0x03, 0xFF }                                     -- rlnk sent a ping
    local one_status_on    = { 0xFE, 0x09, 0x00, 0x20, 0x10, 0x01, 0x01, 0x30, 0x30, 0x30, 0x33, 0x7C, 0xFF } -- outlet 1 is on
    local one_status_off   = { 0xFE, 0x09, 0x00, 0x20, 0x10, 0x01, 0x00, 0x30, 0x30, 0x30, 0x33, 0x7B, 0xFF } -- outlet 1 is off
    local two_status_on    = { 0xFE, 0x09, 0x00, 0x20, 0x10, 0x02, 0x01, 0x30, 0x30, 0x30, 0x33, 0x7D, 0xFF } -- outlet 2 is on
    local two_status_off   = { 0xFE, 0x09, 0x00, 0x20, 0x10, 0x02, 0x00, 0x30, 0x30, 0x30, 0x33, 0x7C, 0xFF } -- outlet 2 is off

    -- error messages
    local err_bad_checksum = { 0xFE, 0x04, 0x00, 0x10, 0x01, 0x13, 0xFF } -- bad checksum
    local err_bad_length   = { 0xFE, 0x04, 0x00, 0x10, 0x02, 0x14, 0xFF } -- bad length
    local err_escaped      = { 0xFE, 0x04, 0x00, 0x10, 0x03, 0x15, 0xFF } -- escaped error
    local err_invalid_cmd  = { 0xFE, 0x04, 0x00, 0x10, 0x04, 0x16, 0xFF } -- invalid command
    local err_invalid_scmd = { 0xFE, 0x04, 0x00, 0x10, 0x05, 0x17, 0xFF } -- invalid sub command
    local err_data_bytes_n = { 0xFE, 0x04, 0x00, 0x10, 0x06, 0x18, 0xFF } -- invalid quantity data bytes
    local err_data_bytes_v = { 0xFE, 0x04, 0x00, 0x10, 0x07, 0x19, 0xFF } -- invalid data byte values
    local err_cr_denied    = { 0xFE, 0x04, 0x00, 0x10, 0x08, 0x1A, 0xFF } -- access denied (credentials)
    local err_unknown      = { 0xFE, 0x04, 0x00, 0x10, 0x10, 0x1B, 0xFF } -- unknown
    local err_epo_denied   = { 0xFE, 0x04, 0x00, 0x10, 0x11, 0x1C, 0xFF } -- access denied (EPO)

    -- once we get the initial status, keep track of what happens to the outlets
    -- QSYS end by parsing response messages when off and on payloads are sent

    local function stringfromBytes(t)
        local bytearr = {}
            for _, v in ipairs(t) do
                local utf8byte = v < 0 and (0xff + v + 1) or v
                table.insert(bytearr, string.char(utf8byte))
            end
        return table.concat(bytearr)
    end

    local function hexStringFromArray(a)
        local a_table = {}
        for i=1, #a do
            table.insert(a_table, tostring(string.format("%02X", a[i])))
        end
        -- concatenate
        local a_string = table.concat(a_table, " ")
        return a_string
    end

    -- start the socket
    socket                  = TcpSocket.New();
    socket.ReadTimeout      = 0;
    socket.WriteTimeout     = 0;
    socket.ReconnectTimeout = 5;

    socket.Connected = function (socket)
        print("TCP socket is connected")
        Controls.connect.Color  = "green"
        Controls.connect.Legend = "Connected"
    end
    socket.Reconnect = function(socket)
        print("TCP socket is reconnecting")
        Controls.connect.Color  = "orange"
        Controls.connect.Legend = "Reconnecting"
        Controls.connect.Boolean = false
    end
    socket.Closed = function(socket)
        print("TCP socket was closed by remote")
        -- set the button
        Controls.connect.Color  = "red"
        Controls.connect.Legend = "Disconnected"
        Controls.connect.Boolean = false

        -- reset LEDs
        Controls.led_1.Boolean = false
        Controls.led_2.Boolean = false

        -- reset access box to defaults
        Controls.access.String = ""
        Controls.access.Color  = "gray"
    end
    socket.Error = function(socket,err)
        print("TCP socket had an error: ", err)
    end
    socket.Timeout = function(socket, err)
        print("TCP socket timed out", err)
    end
    socket.Data = function(socket)
        local data = socket:Read(socket.BufferLength)
        local bytes = {}
        local byteString = {}

        for i=1, data:len() do
            table.insert(bytes, data:byte(i))
            table.insert(byteString, tostring(string.format("%02X", data:byte(i))))
        end

        local dataString = table.concat(bytes, " ") -- data received

        -- check received data against the following:
        local pingString         = table.concat(ping, " ")           -- ping received
        local loginString        = table.concat(login_accepted, " ") -- login success
        local rejectString       = table.concat(login_rejected, " ") -- login failed
        local outlet1OnString    = table.concat(one_status_on,  " ") -- outlet 1 on
        local outlet1OffString   = table.concat(one_status_off, " ") -- outlet 1 off
        local outlet2OnString    = table.concat(two_status_on,  " ") -- outlet 2 on
        local outlet2OffString   = table.concat(two_status_off, " ") -- outlet 2 off
        
        -- parse error messages accordingly

        if dataString == loginString then
            print("[Login] Success")
            Controls.access.String = "Granted"
            Controls.access.Color  = "green"

            -- request state of the outlets
            print("[Requesting Outlet 1 status]")
            socket:Write(stringfromBytes(get_one))

            print("[Requesting Outlet 2 status]")
            socket:Write(stringfromBytes(get_two))

        elseif dataString == pingString then
            local pongString = hexStringFromArray(pong)

            print("[Received a ping] "..table.concat(byteString, " "))
            print("[Sending a pong] "..pongString)
            socket:Write(stringfromBytes(pong))
        elseif dataString == outlet1OnString then
            print("[Outlet 1] status: ON")
            Controls.Outlet1.Boolean = true -- set button state
            Controls.led_1.Boolean   = true -- set led            
        elseif dataString == outlet1OffString then
            print("[Outlet 1] status: OFF")
            Controls.Outlet1.Boolean = false -- '''
            Controls.led_1.Boolean   = false -- unset led
        elseif dataString == outlet2OnString then
            print("[Outlet 2] status: ON")
            Controls.Outlet2.Boolean = true
            Controls.led_2.Boolean   = true
        elseif dataString == outlet2OffString then
            print("[Outlet 2] status: OFF")
            Controls.Outlet2.Boolean = false
            Controls.led_2.Boolean   = false
        elseif dataString == rejectString then
            print("[Login] Failed")
            Controls.access.String = "Denied"
            Controls.access.Color  = "red"
        else
            print("[Data Received] "..table.concat(byteString, " "))
        end
    end

    local function calculateChecksum(byteArray)
        local sum = 0
        for i=1, #byteArray do
            sum = sum + byteArray[i] 
        end
        sum = sum & 0x07F -- bitwise "and" to keep least significant 7 bits
        return sum
    end

    -- will only change the byteArray if necessary
    local function escapeCharacters(byteArray)
        flag = 0           -- 0 meaning no need to escape array
        local indexes = {} -- store offending characters' indexes here

        for i=1, #byteArray do
            if byteArray[i] == 0xFE or byteArray[i] == 0xFD or byteArray[i] == 0xFF then
                flag = 1
                table.insert(indexes,i)
            end
        end

        if flag == 1 then -- "username|password" sequence must be escaped

            -- every time an escape byte is added, the length increases
            -- +1. here we correct indexes' values for offsets
            for i=1, #indexes do
                local incr = (i - 1)
                indexes[i] = indexes[i] + incr
            end

            -- add escape characters to corrected indexes
            for i=1, #indexes do
                table.insert(byteArray, indexes[i], 0xFD)
            end
        end
        return byteArray
    end

    local function invertHex(hex) -- bitwise inverse of a hexadecimal value
        invHex = ~(hex) -- invert the hexadecimal value
        invHex = invHex & 0xFF -- bitwise "and" to keep only the most significant bits
        return invHex
    end

    -- connect function
    local function connectDevice(arg)
        -- local variables for address and port
        local address  = ""
        local port     = ""
        local username = ""
        local password = ""

        local valid = 1 -- assume user filed fields correctly

        sendData = 'Hello\x0d\x0a'

        if arg.Value == 1.0 then -- toggled
            print("toggled")

            -- catch values
            address  = Controls.address.String
            port     = tonumber(Controls.port.String)
            username = Controls.username.String
            password = Controls.password.String

            -- check if all fields are filled
            if address == "" then
                print("address field is empty")
                valid = 0
            elseif port == "" then
                print("port field is empty")
                valid = 0
            elseif username == "" then
                print("username field is empty")
                valid = 0
            elseif password == "" then
                print("password field is empty")
                valid = 0 
            end

            if valid == 1 then -- user filled all fields
                print("attempting connection to: "..address.." port: "..port)
                socket:Connect(address, port) -- connect

                -- prepare login message
                local loginMessage = {}
                local characterArray = {}
                local checksumData = {}

                -- pass username to characterArray
                for i = 1, #username do
                    local c = username:sub(i,i)
                    local asciiChar = string.byte(c)

                    table.insert(characterArray, asciiChar)
                end

                -- pass separator "|" to characterArray
                table.insert(characterArray, string.byte("|"))

                -- pass password to characterArray
                for i = 1, #password do
                    local c = password:sub(i,i)
                    local asciiChar = string.byte(c)

                    table.insert(characterArray, asciiChar)
                end

                -- calculate data length
                local dataLength = #characterArray + 3 -- charArray bytes + 1b[addr] + 1b[cmd] + 1b[subcmd]

                -- load partials (header, length, addr, cmd and subcmd) to checksumData
                table.insert(checksumData, 0xFE)       -- [header]   0xFE header_default
                table.insert(checksumData, dataLength) -- [len]      0x?? len of data envelope
                table.insert(checksumData, 0x00)       -- [addr]     0x00 addr_default
                table.insert(checksumData, 0x02)       -- [cmd]      0x02 login
                table.insert(checksumData, 0x01)       -- [subcmd]   0x01 set (setting login)

                -- copy checksumData partials to loginMessage array
                for i=1, #checksumData do
                    table.insert(loginMessage, checksumData[i])
                end

                -- sanitize the characterArray and pass it to loginMessage
                local sanitizedCharArray = escapeCharacters(characterArray)
                for i=1, #sanitizedCharArray do
                    table.insert(loginMessage, sanitizedCharArray[i])
                end
                
                -- pass unsanitized (raw) character array to checksumData array
                for i=1, #characterArray do
                    table.insert(checksumData, characterArray[i])
                end

                -- calculate checksum
                local checksum   = calculateChecksum(checksumData)
                -- print("[checksum] "..checksum)

                -- pass checksum to loginMessage
                table.insert(loginMessage, checksum)   -- [checksum] 

                -- pass tail to loginMessage
                table.insert(loginMessage, 0xFF)       -- [tail]     0xff tail_default

                -- print for debugging (sanity check)
                --print("checkpoint: ")
                --print("[characterArray] "..table.concat(characterArray, " "))
                --print("[dataLength] "..dataLength)
                --print("[checksumData] "..table.concat(checksumData, " "))
                --print("[sanitized] "..table.concat(sanitizedCharArray, " "))
                print("[login] login request: "..table.concat(loginMessage, " "))

                -- delete checksumData from memory, leave it for garbage collection
                local login = stringfromBytes(loginMessage)
                socket:Write(login) -- send login data
            end
        else -- untoggled
            print("Disconnect")
            -- set the button
            Controls.connect.Color = "red"
            Controls.connect.Legend = "Disconnected"
            Controls.connect.Boolean = false

            -- reset LEDs
            Controls.led_1.Boolean = false
            Controls.led_2.Boolean = false

            -- reset the access text box
            Controls.access.String = ""
            Controls.access.Color  = "gray"
            socket:Disconnect()
        end
    end

    local function toggleOutlet1(arg)
        if arg.Value == 1.0 then
            if Controls.connect.Legend == "Connected" then
                if Controls.access.String == "Granted" then
                    local hex = hexStringFromArray(one_on)
                    print("[Outlet 1] Toggle ON: "..hex)
                    Controls.led_1.Boolean = true
                    socket:Write(stringfromBytes(one_on))
                else
                    print("[Outlet 1] Toggle ON error: access denied")
                end
            else
                print("[Outlet 1] Toggle ON error: socket disconnected")
            end
        else
            if Controls.connect.Legend == "Connected" then
                if Controls.access.String == "Granted" then
                        local hex = hexStringFromArray(one_off)
                        print("[Outlet 1] Toggle OFF: "..hex)
                        Controls.led_1.Boolean = false
                        socket:Write(stringfromBytes(one_off))
                else
                    print("[Outlet 1] Toggle OFF error: access denied")
                end
            else
                print("[Outlet 1] Toggle OFF error: socket disconnected")
            end
        end
    end
    local function toggleOutlet2(arg)
        if arg.Value == 1.0 then
            if Controls.connect.Legend == "Connected" then
                if Controls.access.String == "Granted" then
                    local hex = hexStringFromArray(two_on)
                    print("[Outlet 2] Toggle ON: "..hex)
                    Controls.led_2.Boolean = true
                    socket:Write(stringfromBytes(two_on))
                else
                    print("[Outlet 2] Toggle ON error: access denied")
                end
            else
                print("[Outlet 2] Toggle ON error: socket disconnected")
            end
        else
            if Controls.connect.Legend == "Connected" then
                if Controls.access.String == "Granted" then
                    local hex = hexStringFromArray(two_off)
                    print("[Outlet 2] Toggle OFF: "..hex)
                    Controls.led_2.Boolean = false
                    socket:Write(stringfromBytes(two_off))
                else
                    print("[Outlet 2] Toggle OFF error: socket disconnected")
                end
            else
                print("[Outlet 2] Toggle OFF error: socket disconnected")
            end
        end
    end

    -- when user presses connect:
    Controls.connect.EventHandler = connectDevice
    Controls.Outlet1.EventHandler = toggleOutlet1
    Controls.Outlet2.EventHandler = toggleOutlet2
end

print("Welcome to the Middle Atlantic RLNK-215 Plugin for QSYS")

--[[

Protocol Message Structure
<header><length><data envelope><checksum><tail>

-- login:
fe 10 00 0 5 73 65 72 7c 70 61 73 73 77 6f 72 64 3f ff 
fe 09 00 20 01 01 01 30 30 30 30 6a ff 

checksum: <header> + <length> + <data envelope>
7 least significant bits, 8th bit: 0


 CMD    HEX                                                           DEC                                           
[login] FE 10 00 02 01 75 73 65 72 7C 70 61 73 73 77 6F 72 64 3F FF | 254, 16, 0, 2, 1, 117, 115, 101, 114, 124, 112, 97, 115, 115, 119, 111, 114, 100, 63, 255 
[1:ON ] FE 09 00 20 01 01 01 30 30 30 30 6A FF                      | 254, 9, 0, 32, 1, 1, 1, 48, 48, 48, 48, 106, 255
[2:ON ] FE 09 00 20 01 01 01 30 30 30 30 6B FF                      | 254, 9, 0, 32, 1, 1, 1, 48, 48, 48, 48, 107, 255
[1:OFF] FE 09 00 20 01 01 00 30 30 30 30 69 FF                      | 254, 9, 0, 32, 1, 1, 0, 48, 48, 48, 48, 105, 255
[2:OFF] FE 09 00 20 01 02 00 30 30 30 30 6a FF                      | 254, 9, 0, 32, 1, 2, 0, 48, 48, 48, 48, 106, 255

<0xFE> 10 00 02 01 75 73 65 72 7C 70 61 73 73 77 6F 72 64 3F <0xFF>

example message:
<header> <len> <addr> <cmd> <subcmd>  "U"  "s"  "e"  "r"  "N"  "a"  "m"  "e"  "|"  "P"  "a"  "s"  "s"  "w"  "o"  "r"  "d"    <checksum> <tail>
  0xfe    0x14  0x00   0x02   0x01     0x55 0x73 0x65 0x72 0x4e 0x61 0x6d 0x65 0x7c 0x50 0x61 0x73 0x73 0x77 0x65 0x72 0x64     0x??     0xff

if any message contains 0xFE, 0xFF, or 0xFD  it must be escaped in order to prevent early message termination:
<0xFF>       (unescaped)
<0xFD><0x00> (escaped) prepended protected byte with 0xFD and inverted the protected bytes' bits

bit.bnot(x)           -- bitwise not of x


escape bytes must be ignored from checksum and length calculation.

command:  byte:  subcmd:
Login     0x02   Set, Response

Sub command: byte:
Set          0x01
Status Delta 0x12

<header> <len>  <addr> <cmd>  <subcmd>  "u"   "s"   "e"   "r"   "|"   "70"  "a"   "s"   "s"   "w"   "o"   "r"   "d"   <checksum>  <tail>
 0xFE,   0x10,  0x00,  0x02,  0x01,     0x75, 0x73, 0x65, 0x72, 0x7C, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x3F,       0xFF



inverting the hexadecimal value and snipping leading hex values in Lua

local xValues = {0xFF, 0x01, 0x6a, 0x72, 0xFE, 0x01}
local inv = {}

for i=1, #xValues do
    inv[i] = ~(xValues[i])
    inv[i] = inv[i] & 0xFF -- bitwise 'and' to keep only the most significant bits
    
    xstring = string.format("%02X", xValues[i])
    istring = string.format("%02X", inv[i])
    
    print("hex: "..xstring.." >\t"..istring)
end


while loop for socket.data:

local line = socket:ReadLine(TcpSocket.EOL.Any)
while(line~=nil) do
    print("TCP socket has data: ", line)
    line = socket:ReadLine(TcpSocket.EOL.Any)
end

]]--


